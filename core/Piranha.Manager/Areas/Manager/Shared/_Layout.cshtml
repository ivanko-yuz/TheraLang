@{
    var module = Piranha.App.Modules.Get<Piranha.Manager.Module>();
}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <base href="@(new Uri(new Uri(Url.ActionContext.HttpContext.Request.Scheme + "://" + Url.ActionContext.HttpContext.Request.Host.Value), Url.Content("~")).ToString())" />
    <link rel="stylesheet" href="~/manager/assets/css/full.min.css">
    @foreach (var style in module.Styles)
    {
        <link href="@Url.Content(style)" rel="stylesheet" type="text/css" />
    }

    <title>@ViewBag.Title</title>
</head>
<body>
    <partial name="~/Areas/Manager/Shared/Partial/_Menu.cshtml" />

    @RenderBody()

    <partial name="~/Areas/Manager/Shared/Partial/_BlockPickerModal.cshtml" />
    <partial name="~/Areas/Manager/Shared/Partial/_MediaPickerModal.cshtml" />
    <partial name="~/Areas/Manager/Shared/Partial/_PagePickerModal.cshtml" />
    <partial name="~/Areas/Manager/Shared/Partial/_PostPickerModal.cshtml" />
    <partial name="~/Areas/Manager/Shared/Partial/_PreviewModal.cshtml" />
    <partial name="~/Areas/Manager/Shared/Partial/_Notifications.cshtml" />
    <partial name="~/Areas/Manager/Shared/Partial/_MediaUploadTemplate.cshtml" />
    @foreach (var partial in module.Partials)
    {
        <partial name="@partial" />
    }

    <script type="text/javascript">
        var piranha = {};
        window.piranha = piranha;
        piranha.baseUrl = "@Url.Content("~/")";
    </script>

    <partial name="~/Areas/Manager/Shared/Partial/_EditorConfig.cshtml" />

    @RenderSection("partials", required: false)

    <environment include="Development">
        <script type="text/javascript" src="~/manager/assets/dist/js/piranha-dev.js"></script>
    </environment>
    <environment exclude="Development">
        <script type="text/javascript" src="~/manager/assets/dist/js/piranha.min.js"></script>
    </environment>
    <script type="text/javascript">
        //Because developer revealed that this step needs to be taken first. Vue is supposed to have whatever types it works with available this way, otherwise it fails in dev mode.
        Vue.prototype.piranha = window.piranha;
    </script>

    @if (!string.IsNullOrWhiteSpace(ViewBag.Message))
    {
        <script>
        piranha.notifications.push({
            body: "@Html.Raw(ViewBag.Message)",
            type: "@Html.Raw(ViewBag.MessageCss)",
            hide: true
        });
        </script>
    }

    <partial name="~/Areas/Manager/Shared/Partial/_Resources.cshtml" />

    @foreach (var script in module.Scripts)
    {
        if (string.IsNullOrWhiteSpace(script.Integrity))
        {
            <script type="@script.Type" src="@Url.Content(script.Src)"></script>
        }
        else if (script.CrossOriginValue == ECrossOriginPolicy.None)
        {
            <script type="@script.Type" src="@Url.Content(script.Src)" integrity="@script.Integrity"></script>
        }
        else
        {
            <script type="@script.Type" src="@Url.Content(script.Src)" integrity="@script.Integrity" crossorigin="@script.GetCrossOriginValueStrValue()"></script>
        }
    }
    @RenderSection("script", required: false)
</body>
</html>