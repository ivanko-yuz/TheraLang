// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheraLang.DAL;

namespace TheraLang.DAL.Migrations
{
    [DbContext(typeof(IttmmDbContext))]
    [Migration("20200211125300_UserUpdateMigration")]
    partial class UserUpdateMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheraLang.DAL.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Currency")
                        .IsRequired();

                    b.Property<string>("DonationId");

                    b.Property<string>("LiqpayOrderId")
                        .IsRequired();

                    b.Property<int>("PaymentId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SocietyId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SocietyId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("Details")
                        .HasMaxLength(5000);

                    b.Property<decimal>("DonationTarget")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ProjectEnd");

                    b.Property<DateTime>("ProjectStart");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasDefaultValue(0);

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ProjectParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<int>("ProjectId");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDateUtc");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipations");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique()
                        .HasFilter("[TypeName] IS NOT NULL");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("File");

                    b.Property<string>("FileName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDateUtc");

                    b.Property<string>("Url")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .HasMaxLength(1000);

                    b.Property<int>("ResourceId");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceAttachments");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ResourceCategories");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId");

                    b.Property<int>("ResourceId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceToProject");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("527a18ba-2562-4f92-b1fd-33348079160c"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("5ebdb58a-9e96-4bc2-b99f-0b34021cad8d"),
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("dd1c415b-34fd-4bb0-ab17-29d6bf3e32d0"),
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Society", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Society");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa642287-ef14-4464-a178-8994911eef8d"),
                            Email = "admin@utmm.com",
                            PasswordHash = "AS/RP/IyJp+fboy9nTN0FxuwSlvpEv8hePf/JcNwK78vrF4AwUaun2C7jHC85DFepQ==",
                            RoleId = new Guid("527a18ba-2562-4f92-b1fd-33348079160c")
                        },
                        new
                        {
                            Id = new Guid("c0c5f4f4-c890-4ea1-8699-130ab8c99e92"),
                            Email = "member@utmm.com",
                            PasswordHash = "ASnI+3a02jHBC0JV2346BTbDto11GUglHEL48tdMxRc3g7hfLA1CquCQcRkncs3/pQ==",
                            RoleId = new Guid("5ebdb58a-9e96-4bc2-b99f-0b34021cad8d")
                        });
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaAlias", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("AliasUrl")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("SiteId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "AliasUrl")
                        .IsUnique();

                    b.ToTable("Piranha_Aliases");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaBlock", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsReusable");

                    b.Property<DateTime>("LastModified");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("Title")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Piranha_Blocks");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaBlockField", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("BlockId");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("SortOrder");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BlockId", "FieldId", "SortOrder")
                        .IsUnique();

                    b.ToTable("Piranha_BlockFields");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaCategory", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("BlogId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("BlogId", "Slug")
                        .IsUnique();

                    b.ToTable("Piranha_Categories");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaMedia", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid?>("FolderId");

                    b.Property<int?>("Height");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("PublicUrl");

                    b.Property<long>("Size");

                    b.Property<int>("Type");

                    b.Property<int?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Piranha_Media");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaMediaFolder", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid?>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("Piranha_MediaFolders");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaMediaVersion", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(8);

                    b.Property<int?>("Height");

                    b.Property<Guid>("MediaId");

                    b.Property<long>("Size");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("MediaId", "Width", "Height")
                        .IsUnique()
                        .HasFilter("[Height] IS NOT NULL");

                    b.ToTable("Piranha_MediaVersions");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPage", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(N'Page')")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsHidden");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(128);

                    b.Property<string>("NavigationTitle")
                        .HasMaxLength(128);

                    b.Property<Guid?>("OriginalPageId");

                    b.Property<string>("PageTypeId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid?>("ParentId");

                    b.Property<DateTime?>("Published");

                    b.Property<int>("RedirectType");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(256);

                    b.Property<string>("Route")
                        .HasMaxLength(256);

                    b.Property<Guid>("SiteId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("PageTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SiteId", "Slug")
                        .IsUnique();

                    b.ToTable("Piranha_Pages");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPageBlock", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("BlockId");

                    b.Property<Guid>("PageId");

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("PageId", "SortOrder")
                        .IsUnique();

                    b.ToTable("Piranha_PageBlocks");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPageField", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("PageId");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("SortOrder");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PageId", "RegionId", "FieldId", "SortOrder");

                    b.ToTable("Piranha_PageFields");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPageRevision", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Data");

                    b.Property<Guid>("PageId");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Piranha_PageRevisions");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPageType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<string>("Body");

                    b.Property<string>("ClrType")
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("Piranha_PageTypes");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaParam", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Piranha_Params");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPost", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("BlogId");

                    b.Property<Guid>("CategoryId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256);

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(128);

                    b.Property<string>("PostTypeId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("Published");

                    b.Property<int>("RedirectType");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(256);

                    b.Property<string>("Route")
                        .HasMaxLength(256);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("BlogId", "Slug")
                        .IsUnique();

                    b.ToTable("Piranha_Posts");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostBlock", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("BlockId");

                    b.Property<Guid?>("ParentId");

                    b.Property<Guid>("PostId");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("PostId", "SortOrder")
                        .IsUnique();

                    b.ToTable("Piranha_PostBlocks");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostField", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("PostId");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("SortOrder");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PostId", "RegionId", "FieldId", "SortOrder");

                    b.ToTable("Piranha_PostFields");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostRevision", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Data");

                    b.Property<Guid>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Piranha_PostRevisions");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostTag", b =>
                {
                    b.Property<Guid>("PostId");

                    b.Property<Guid>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("Piranha_PostTags");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<string>("Body");

                    b.Property<string>("ClrType")
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("Piranha_PostTypes");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaSite", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime?>("ContentLastModified");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Culture")
                        .HasMaxLength(6);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Hostnames")
                        .HasMaxLength(256);

                    b.Property<string>("InternalId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("SiteTypeId")
                        .HasMaxLength(64);

                    b.Property<string>("Title")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("InternalId")
                        .IsUnique();

                    b.ToTable("Piranha_Sites");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaSiteField", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("SiteId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "RegionId", "FieldId", "SortOrder");

                    b.ToTable("Piranha_SiteFields");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaSiteType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<string>("Body");

                    b.Property<string>("ClrType")
                        .HasColumnName("CLRType")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("Piranha_SiteTypes");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaTag", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("BlogId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("BlogId", "Slug")
                        .IsUnique();

                    b.ToTable("Piranha_Tags");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Donation", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Project", "Project")
                        .WithMany("Donations")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TheraLang.DAL.Entities.Society", "Society")
                        .WithMany("Donations")
                        .HasForeignKey("SocietyId");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Project", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.ProjectType", "Type")
                        .WithMany("Projects")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ProjectParticipation", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Project", "Project")
                        .WithMany("ProjectParticipations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Resource", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.ResourceCategory", "ResourceCategory")
                        .WithMany("Resources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheraLang.DAL.Entities.User", "User")
                        .WithMany("Resources")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceAttachment", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Resource", "Resource")
                        .WithMany("ResourceAttach")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceProject", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Project", "Project")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Entities.Resource", "Resource")
                        .WithMany("ResourceProjects")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.User", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaAlias", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaSite", "Site")
                        .WithMany("PiranhaAliases")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaBlockField", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaBlock", "Block")
                        .WithMany("PiranhaBlockFields")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaCategory", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPage", "Blog")
                        .WithMany("PiranhaCategories")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaMedia", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaMediaFolder", "Folder")
                        .WithMany("PiranhaMedia")
                        .HasForeignKey("FolderId");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaMediaVersion", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaMedia", "Media")
                        .WithMany("PiranhaMediaVersions")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPage", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPageType", "PageType")
                        .WithMany("PiranhaPages")
                        .HasForeignKey("PageTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPage", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaSite", "Site")
                        .WithMany("PiranhaPages")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPageBlock", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaBlock", "Block")
                        .WithMany("PiranhaPageBlocks")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPage", "Page")
                        .WithMany("PiranhaPageBlocks")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPageField", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPage", "Page")
                        .WithMany("PiranhaPageFields")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPageRevision", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPage", "Page")
                        .WithMany("PiranhaPageRevisions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPost", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPage", "Blog")
                        .WithMany("PiranhaPosts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaCategory", "Category")
                        .WithMany("PiranhaPosts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPostType", "PostType")
                        .WithMany("PiranhaPosts")
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostBlock", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaBlock", "Block")
                        .WithMany("PiranhaPostBlocks")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPost", "Post")
                        .WithMany("PiranhaPostBlocks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostField", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPost", "Post")
                        .WithMany("PiranhaPostFields")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostRevision", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPost", "Post")
                        .WithMany("PiranhaPostRevisions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaPostTag", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPost", "Post")
                        .WithMany("PiranhaPostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaTag", "Tag")
                        .WithMany("PiranhaPostTags")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaSiteField", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaSite", "Site")
                        .WithMany("PiranhaSiteFields")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Piranha.Entities.PiranhaTag", b =>
                {
                    b.HasOne("TheraLang.DAL.Piranha.Entities.PiranhaPage", "Blog")
                        .WithMany("PiranhaTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
