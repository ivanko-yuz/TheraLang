// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheraLang.DAL;

namespace TheraLang.DAL.Migrations
{
    [DbContext(typeof(IttmmDbContext))]
    [Migration("20200210094348_TestAuthor")]
    partial class TestAuthor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheraLang.DAL.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Currency")
                        .IsRequired();

                    b.Property<string>("DonationId");

                    b.Property<string>("LiqpayOrderId")
                        .IsRequired();

                    b.Property<int>("PaymentId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SocietyId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SocietyId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("MainImageUrl")
                        .IsRequired();

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDateUtc");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("News");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("Details")
                        .HasMaxLength(5000);

                    b.Property<decimal>("DonationTarget")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ProjectEnd");

                    b.Property<DateTime>("ProjectStart");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasDefaultValue(0);

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ProjectParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<int>("ProjectId");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDateUtc");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipations");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique()
                        .HasFilter("[TypeName] IS NOT NULL");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("File");

                    b.Property<string>("FileName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDateUtc");

                    b.Property<string>("Url")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .HasMaxLength(1000);

                    b.Property<int>("ResourceId");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceAttachments");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ResourceCategories");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId");

                    b.Property<int>("ResourceId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceToProject");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3982c8bb-ced6-4538-b5d7-94d025a1a2eb"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("88a04f5f-b493-4eaa-a82e-13fd903692e5"),
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("67d5f889-7b57-44e5-a22c-5c9ac7016892"),
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Society", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Society");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.UploadedNewsContentImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedById");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<int?>("NewsId");

                    b.Property<Guid?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDateUtc");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("UploadedNewsContentImages");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("973fd9ff-d3f9-42d8-8c6e-5a5ea14c36d2"),
                            PasswordHash = "AbJ3qO9Lgv6eTbklGeRCDdZuH67ylEcszOe+BGc+MiiIc8cCBezM3fNqwmK+i4K/gQ==",
                            RoleId = new Guid("3982c8bb-ced6-4538-b5d7-94d025a1a2eb"),
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("02360fe1-e470-49fc-8e4d-843520c81196"),
                            PasswordHash = "AaYl2XN7Eq9Y1S+Z/PIWEtSEBDZyN2UhZL0ZPDahmoIN+/n9/GVbghqnXzJu+955qQ==",
                            RoleId = new Guid("88a04f5f-b493-4eaa-a82e-13fd903692e5"),
                            UserName = "Member"
                        });
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Donation", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Project", "Project")
                        .WithMany("Donations")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TheraLang.DAL.Entities.Society", "Society")
                        .WithMany("Donations")
                        .HasForeignKey("SocietyId");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.News", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.User", "Author")
                        .WithMany("News")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Project", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.ProjectType", "Type")
                        .WithMany("Projects")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ProjectParticipation", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Project", "Project")
                        .WithMany("ProjectParticipations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.Resource", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.ResourceCategory", "ResourceCategory")
                        .WithMany("Resources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheraLang.DAL.Entities.User", "User")
                        .WithMany("Resources")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceAttachment", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Resource", "Resource")
                        .WithMany("ResourceAttach")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.ResourceProject", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Project", "Project")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheraLang.DAL.Entities.Resource", "Resource")
                        .WithMany("ResourceProjects")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.UploadedNewsContentImage", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.News", "News")
                        .WithMany("UploadedContentImages")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheraLang.DAL.Entities.User", b =>
                {
                    b.HasOne("TheraLang.DAL.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
